Перем Кластер_Агент;
Перем Элементы;
Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера			- АгентКластера	- ссылка на родительский объект агента кластера
//
Процедура ПриСозданииОбъекта(АгентКластера)

	Кластер_Агент = АгентКластера;
	ОбновитьДанные();

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
Процедура ОбновитьДанные()

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("agent");
	ПараметрыЗапуска.Добавить("admin");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	Элементы = Новый Соответствие();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		Элементы.Вставить(ТекОписание["name"], ТекОписание);
	КонецЦикла;

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает список администраторов агента кластеров 1С
//   
// Параметры:
//   ОбновитьДанные 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - список администраторов агента кластеров 1С
//
Функция ПолучитьСписок(ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат Элементы;

КонецФункции // ПолучитьСписок()

// Функция возвращает описание администратора агента кластеров 1С
//   
// Параметры:
//   Имя			 	- Строка		- Имя администратора агента кластеров 1С
//   ОбновитьДанные 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - описание администратора агента кластеров 1С
//
Функция Получить(Имя, ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат Элементы[Имя];

КонецФункции // Получить()

// Процедура добавляет нового администратора агента кластеров
//   
// Параметры:
//   Имя			 	- Строка		- имя администратора агента кластеров 1С
//   Пароль			 	- Строка		- пароль администратора агента кластеров 1С
//   УстановитьТекущим 	- Булево		- Истина - сделать добавленного администратора текущим для агента кластеров
//   Описание		 	- Строка		- описание администратора агента кластеров 1С
//   СпособАвторизации 	- Строка		- Пароль / пользователь ОС
//   ПользовательОС 	- Строка		- пользователь ОС, соответствующий администратору
//
Процедура Добавить(Имя
				 , Пароль = ""
				 , УстановитьТекущим = Ложь
				 , Описание = ""
				 , СпособАвторизации = "pwd"
				 , ПользовательОС = "") Экспорт

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("agent");
	ПараметрыЗапуска.Добавить("admin");
	ПараметрыЗапуска.Добавить("register");
	
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));
	ПараметрыЗапуска.Добавить(СтрШаблон("--pwd=%1", Пароль));
	ПараметрыЗапуска.Добавить(СтрШаблон("--descr=%1", Описание));
	ПараметрыЗапуска.Добавить(СтрШаблон("--auth=%1", СпособАвторизации));
	ПараметрыЗапуска.Добавить(СтрШаблон("--os-user=%1", ПользовательОС));
	
	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Если УстановитьТекущим Тогда
		Кластер_Агент.УстановитьАдминистратора(Имя, Пароль);
	КонецЕсли;

	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры // Добавить()

// Процедура удаляет администратора агента кластеров
//   
// Параметры:
//   Имя			 	- Строка		- имя администратора агента кластеров 1С
//
Процедура Удалить(Имя) Экспорт

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("agent");
	ПараметрыЗапуска.Добавить("admin");
	ПараметрыЗапуска.Добавить("remove");
	
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));
	
	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры // Удалить()

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
