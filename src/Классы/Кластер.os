Перем Кластер_Ид; // cluster
Перем Кластер_Имя; // name
Перем Кластер_Сервер; // host
Перем Кластер_Порт; // port
Перем Кластер_Параметры;

Перем Кластер_Агент;
Перем Кластер_Администратор;
Перем Кластер_Администраторы;
Перем Кластер_Серверы;
Перем Кластер_Менеджеры;
Перем Кластер_Сеансы;
Перем Кластер_Соединения;
Перем Кластер_ИБ;
Перем Кластер_Профили;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера			- АгентКластера	- ссылка на родительский объект агента кластера
//   Ид						- Строка		- идентификатор кластера
//   Администратор			- Строка		- имя администратора кластера 1С
//   ПарольАдминистратора	- Строка		- пароль администратора кластера 1С
//
Процедура ПриСозданииОбъекта(АгентКластера, Ид, Администратор = "", ПарольАдминистратора = "")

	Если НЕ ЗначениеЗаполнено(Ид) Тогда
		Возврат;
	КонецЕсли;

	Кластер_Агент = АгентКластера;
	Кластер_Ид = Ид;
	
	Если ЗначениеЗаполнено(Администратор) Тогда
		Кластер_Администратор = Новый Структура("Администратор, Пароль", Администратор, ПарольАдминистратора);
	Иначе
		Кластер_Администратор = Неопределено;
	КонецЕсли;

	Кластер_Администраторы = Администраторы(Истина);
	Кластер_Серверы = Серверы(Истина);
	Кластер_Менеджеры = Менеджеры(Истина);
	Кластер_ИБ = ИнформационныеБазы(Истина);

	ОбновитьДанные();

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
Процедура ОбновитьДанные()

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид));

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	ТекОписание = МассивРезультатов[0];

	Кластер_Сервер = ТекОписание.Получить("host");
	Кластер_Порт = ТекОписание.Получить("port");
	Кластер_Имя = ТекОписание.Получить("name");

	ПараметрыОбъекта = ПолучитьСтруктуруПараметровОбъекта();

	Кластер_Параметры = Новый Структура();

	Для Каждого ТекЭлемент Из ПараметрыОбъекта Цикл
		ЗначениеПараметра = Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание,
																  ТекЭлемент.Значение.ИмяПоляРАК,
																  ТекЭлемент.Значение.ЗначениеПоУмолчанию); 
		Кластер_Параметры.Вставить(ТекЭлемент.Ключ, ЗначениеПараметра);
	КонецЦикла;

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает строку параметров авторизации в кластере 1С
//   
// Возвращаемое значение:
//	Строка - строка параметров авторизации в кластере 1С
//
Функция СтрокаАвторизации() Экспорт
	
	Если НЕ ТипЗнч(Кластер_Администратор)  = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;

	Если НЕ Кластер_Администратор.Свойство("Администратор") Тогда
		Возврат "";
	КонецЕсли;

	Лог.Отладка("Администратор " + Кластер_Администратор.Администратор);
	Лог.Отладка("Пароль <***>");

	СтрокаАвторизации = "";
	Если Не ПустаяСтрока(Кластер_Администратор.Администратор) Тогда
		СтрокаАвторизации = СтрШаблон("--cluster-user=%1 --cluster-pwd=%2",
									  Кластер_Администратор.Администратор,
									  Кластер_Администратор.Пароль);
	КонецЕсли;
			
	Возврат СтрокаАвторизации;
	
КонецФункции // СтрокаАвторизации()
	
// Процедура устанавливает параметры авторизации в кластере 1С
//   
// Параметры:
//   Администратор 		- Строка	- администратор кластера 1С
//   Пароль			 	- Строка	- пароль администратора кластера 1С
//
Процедура УстановитьАдминистратора(Администратор, Пароль) Экспорт
	
	Кластер_Администратор = Новый Структура("Администратор, Пароль", Администратор, Пароль);
	
КонецПроцедуры // УстановитьАдминистратора()
	
// Функция возвращает идентификатор кластера 1С
//   
// Возвращаемое значение:
//	Строка - идентификатор кластера 1С
//
Функция Ид() Экспорт

	Возврат Кластер_Ид;

КонецФункции // Ид()

// Функция возвращает имя кластера 1С
//   
// Возвращаемое значение:
//	Строка - имя кластера 1С
//
Функция Имя() Экспорт

	Возврат Кластер_Имя;
	
КонецФункции // Имя()

// Функция возвращает адрес сервера кластера 1С
//   
// Возвращаемое значение:
//	Строка - адрес сервера кластера 1С
//
Функция Сервер() Экспорт
	
	Возврат Кластер_Сервер;
		
КонецФункции // Сервер()
	
// Функция возвращает порт сервера кластера 1С
//   
// Возвращаемое значение:
//	Строка - порт сервера кластера 1С
//
Функция Порт() Экспорт
	
	Возврат Кластер_Порт;
		
КонецФункции // Порт()
	
// Функция возвращает параметры кластера 1С
//   
// Возвращаемое значение:
//	Строка - параметры кластера 1С
//
Функция Параметры() Экспорт
	
	Возврат Кластер_Параметры;
		
КонецФункции // Параметры()
	
// Функция возвращает список администраторов кластера 1С
//   
// Параметры:
//   ОбновитьДанные 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - список администраторов кластера 1С
//
Функция Администраторы(ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		Кластер_Администраторы = Новый АдминистраторыКластера(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;

	Возврат Кластер_Администраторы;

КонецФункции // Администраторы()

// Функция возвращает список серверов кластера 1С
//   
// Параметры:
//   ОбновитьДанные 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	СерверыКластера - список серверов кластера 1С
//
Функция Серверы(ОбновитьДанные = Ложь) Экспорт
	
	Если ОбновитьДанные Тогда
		Кластер_Серверы = Новый СерверыКластера(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Кластер_Серверы;
	
КонецФункции // Серверы()
	
// Функция возвращает список менеджеров кластера 1С
//   
// Параметры:
//   ОбновитьДанные 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	МенеджерыКластера - список менеджеров кластера 1С
//
Функция Менеджеры(ОбновитьДанные = Ложь) Экспорт
	
	Если ОбновитьДанные Тогда
		Кластер_Менеджеры = Новый МенеджерыКластера(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Кластер_Менеджеры;
	
КонецФункции // Менеджеры()
	
// Функция возвращает список информационных баз 1С
//   
// Параметры:
//   ОбновитьДанные 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	ИнформационныеБазы - список информационных баз 1С
//
Функция ИнформационныеБазы(ОбновитьДанные = Ложь) Экспорт
	
	Если ОбновитьДанные Тогда
		Кластер_ИБ = Новый ИнформационныеБазы(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Кластер_ИБ;
	
КонецФункции // ИнформационныеБазы()
	
Процедура Изменить(Знач Имя = "", Знач ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("update");

	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид));

	Если ЗначениеЗаполнено(Имя) Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));
	КонецЕсли;
	
	ПараметрыОбъекта = ПолучитьСтруктуруПараметровОбъекта();

	Для Каждого ТекЭлемент Из ПараметрыОбъекта Цикл
		Если НЕ ПараметрыКластера.Свойство(ТекЭлемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыЗапуска.Добавить(СтрШаблон(ТекЭлемент.ПараметрКоманды + "=%1", ПараметрыКластера[ТекЭлемент.Ключ]));
	КонецЦикла;

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры // Изменить()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча 		- Строка	- имя поля, значение которого будет использовано
//									  в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//	Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПолучитьСтруктуруПараметровОбъекта(ИмяПоляКлюча = "ИмяПараметра") Экспорт
	
	СтруктураПараметров = Новый Соответствие();

	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ИнтервалПерезапуска"							, "lifetime-limit", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ДопустимыйОбъемПамяти"							, "max-memory-size", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ИнтервалПревышенияДопустимогоОбъемаПамяти"		, "max-memory-time-limit", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ДопустимоеОтклонениеКоличестваОшибокСервера"	, "errors-count-threshold", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ПринудительноЗавершатьПроблемныеПроцессы"		, "kill-problem-processes", ДаНет.Нет);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ВыключенныеПроцессыОстанавливатьЧерез"			, "expiration-timeout", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ЗащищенноеСоединение"							, "security-level", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"УровеньОтказоустойчивости"						, "session-fault-tolerance-level", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"РежимРаспределенияНагрузки"					, "load-balancing-mode", РежимыРаспределенияНагрузки.ПоПроизводительности);

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровОбъекта()

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
